# Python Cheatsheet

Table of Comparison Operators
In the table below, a=3 and b=4.

Operator	Description	Example
==	If the values of two operands are equal, then the condition becomes true.	(a == b) is not true.
!=	If values of two operands are not equal, then condition becomes true.	(a != b) is true
>	If the value of left operand is greater than the value of right operand, then condition becomes true.	(a > b) is not true.
<	If the value of left operand is less than the value of right operand, then condition becomes true.	(a < b) is true.
>=	If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.	(a >= b) is not true.
<=	If the value of left operand is less than or equal to the value of right operand, then condition becomes true.	(a <= b) is true.

## Basic Syntax

# Print function
print("Hello, World!")

# Comments
# This is a single line comment
""" This is a 
multiline comment """

## Variables and Data Types

# Integer
x = 5

# Float
y = 3.14

# String
name = "Alice"

# Boolean
is_active = True

# List
fruits = ["apple", "banana", "cherry"]

# Tuple
coordinates = (10.0, 20.0)

# Dictionary
person = {"name": "John", "age": 30}

# Set
unique_numbers = {1, 2, 3}

## Control Structures

# If-Else
if x > 0:
    print("x is positive")
else:
    print("x is non-positive")

# For Loop
for fruit in fruits:
    print(fruit)

# While Loop
count = 0
while count < 5:
    print(count)
    count += 1

## Functions

# Function Definition
def greet(name):
    return f"Hello, {name}!"

# Calling a Function
print(greet("Alice"))

## Classes

# Class Definition
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        return "Woof!"

# Creating an Object
my_dog = Dog("Buddy", 3)

# Calling a Method
print(my_dog.bark())

## File Handling

# Writing to a File
with open("example.txt", "w") as file:
    file.write("Hello, file!")

# Reading from a File
with open("example.txt", "r") as file:
    content = file.read()
    print(content)

## Libraries

# Importing a Library
import math

# Using a Library Function
print(math.sqrt(16))

## List Comprehensions

# Basic List Comprehension
squares = [x**2 for x in range(10)]
print(squares)

## Exception Handling

# Try-Except Block
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero")

## Lambda Functions

# Lambda Function
add = lambda a, b: a + b
print(add(3, 5))

## Decorators

# Decorator Function
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
